import re
from typing import List, Dict
from datetime import datetime

class Resume:
    def __init__(self, name: str, content: str):
        self.name = name
        self.content = content.lower()
        self.score = 0
        self.details = {}

class ResumeScreener:
    def __init__(self, job_keywords: List[str], required_experience: int):
        self.job_keywords = [keyword.lower() for keyword in job_keywords]
        self.required_experience = required_experience
        self.weightings = {
            'keywords': 0.5,    # 50% weight
            'experience': 0.3,  # 30% weight
            'education': 0.2    # 20% weight
        }

    def extract_experience(self, resume: Resume) -> int:
        """Extract years of experience from resume content"""
        patterns = [
            r'(\d+)\s*(?:years?|yrs?)\s*(?:of)?\s*experience',
            r'experience.*?(\d+)\s*(?:years?|yrs?)',
            r'worked.*?(\d+)\s*(?:years?|yrs?)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, resume.content)
            if match:
                return int(match.group(1))
        return 0

    def extract_education(self, resume: Resume) -> float:
        """Score education level (0-1 scale)"""
        education_scores = {
            'phd': 1.0,
            'master': 0.8,
            'bachelor': 0.6,
            'associate': 0.4,
            'diploma': 0.3
        }
        
        for degree, score in education_scores.items():
            if degree in resume.content:
                return score
        return 0.2  # Base score for any education

    def count_keywords(self, resume: Resume) -> int:
        """Count occurrences of job keywords in resume"""
        keyword_count = 0
        for keyword in self.job_keywords:
            keyword_count += resume.content.count(keyword)
        return keyword_count

    def score_resume(self, resume: Resume) -> None:
        """Calculate total score for a resume"""
        # Keyword score (normalized to 0-1 scale)
        keyword_count = self.count_keywords(resume)
        keyword_score = min(keyword_count / len(self.job_keywords), 1.0)

        # Experience score (normalized to 0-1 scale)
        years_experience = self.extract_experience(resume)
        experience_score = min(years_experience / self.required_experience, 1.0)

        # Education score (already 0-1 scale)
        education_score = self.extract_education(resume)

        # Total weighted score
        total_score = (
            (keyword_score * self.weightings['keywords']) +
            (experience_score * self.weightings['experience']) +
            (education_score * self.weightings['education'])
        ) * 100  # Convert to percentage

        resume.score = round(total_score, 2)
        resume.details = {
            'keyword_score': round(keyword_score * 100, 2),
            'experience_years': years_experience,
            'experience_score': round(experience_score * 100, 2),
            'education_score': round(education_score * 100, 2)
        }

    def rank_resumes(self, resumes: List[Resume]) -> List[Resume]:
        """Score and rank all resumes"""
        for resume in resumes:
            self.score_resume(resume)
        
        # Sort by score in descending order
        return sorted(resumes, key=lambda x: x.score, reverse=True)

def print_ranking(ranked_resumes: List[Resume]) -> None:
    """Print formatted ranking results"""
    print("\nResume Ranking Results:")
    print("-" * 50)
    for i, resume in enumerate(ranked_resumes, 1):
        print(f"Rank {i}: {resume.name}")
        print(f"Total Score: {resume.score}%")
        print(f"Keyword Match: {resume.details['keyword_score']}%")
        print(f"Experience: {resume.details['experience_years']} years "
              f"({resume.details['experience_score']}%)")
        print(f"Education Score: {resume.details['education_score']}%")
        print("-" * 50)

# Example usage
def main():
    # Job requirements
    job_keywords = [
        "python",
        "machine learning",
        "data analysis",
        "sql",
        "statistics"
    ]
    required_experience = 3  # years

    # Sample resume content
    resumes = [
        Resume("John Doe", """
            Experienced python developer with 5 years of experience.
            Skilled in machine learning and data analysis.
            Master degree in Computer Science.
            Proficient in sql and statistics.
        """),
        Resume("Jane Smith", """
            2 years of experience in data analysis.
            Bachelor degree in Statistics.
            Knowledge of python and sql.
        """),
        Resume("Bob Johnson", """
            Senior developer with 8 years of experience.
            PhD in Machine Learning.
            Expert in python, machine learning, and statistics.
            Proficient in sql and data analysis.
        """)
    ]

    # Create screener and rank resumes
    screener = ResumeScreener(job_keywords, required_experience)
    ranked_resumes = screener.rank_resumes(resumes)
    
    # Display results
    print_ranking(ranked_resumes)

if __name__ == "__main__":
    main()
